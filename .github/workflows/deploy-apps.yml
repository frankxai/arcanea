name: Deploy Arcanea Applications

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'
  workflow_dispatch:

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      studio: ${{ steps.changes.outputs.studio }}
      gallery: ${{ steps.changes.outputs.gallery }}
      library: ${{ steps.changes.outputs.library }}
      web: ${{ steps.changes.outputs.web }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          studio:
            - 'apps/studio/**'
          gallery:
            - 'apps/gallery/**'
          library:
            - 'apps/library/**'
          web:
            - 'apps/web/**'

  test-and-build:
    name: Test & Build Apps
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.studio == 'true' || needs.changes.outputs.gallery == 'true' || needs.changes.outputs.library == 'true' || needs.changes.outputs.web == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install

    - name: Type check all apps
      run: pnpm type-check

    - name: Lint all apps
      run: pnpm lint

    - name: Build Studio App
      if: needs.changes.outputs.studio == 'true'
      run: pnpm build --filter=@arcanea/studio

    - name: Build Gallery App
      if: needs.changes.outputs.gallery == 'true'
      run: pnpm build --filter=@arcanea/gallery

    - name: Build Library App
      if: needs.changes.outputs.library == 'true'
      run: pnpm build --filter=@arcanea/library

    - name: Build Web App
      if: needs.changes.outputs.web == 'true'
      run: pnpm build --filter=@arcanea/web

  deploy-studio:
    name: Deploy Studio App
    runs-on: ubuntu-latest
    needs: [changes, test-and-build]
    if: needs.changes.outputs.studio == 'true' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_STUDIO_PROJECT_ID }}
        working-directory: ./apps/studio
        vercel-args: '--prod'

  deploy-gallery:
    name: Deploy Gallery App
    runs-on: ubuntu-latest
    needs: [changes, test-and-build]
    if: needs.changes.outputs.gallery == 'true' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_GALLERY_PROJECT_ID }}
        working-directory: ./apps/gallery
        vercel-args: '--prod'

  deploy-library:
    name: Deploy Library App
    runs-on: ubuntu-latest
    needs: [changes, test-and-build]
    if: needs.changes.outputs.library == 'true' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_LIBRARY_PROJECT_ID }}
        working-directory: ./apps/library
        vercel-args: '--prod'

  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    needs: [changes, test-and-build]
    if: needs.changes.outputs.web == 'true' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
        working-directory: ./apps/web
        vercel-args: '--prod'

  update-deployment-status:
    name: Update Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-studio, deploy-gallery, deploy-library, deploy-web]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Create deployment summary
      run: |
        echo "## Arcanea Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Studio**: ${{ needs.deploy-studio.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Gallery**: ${{ needs.deploy-gallery.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Library**: ${{ needs.deploy-library.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Web**: ${{ needs.deploy-web.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY